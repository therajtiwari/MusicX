[{"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/App.js":"1","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/LibrarySong.js":"2","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Player.js":"3","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/data.js":"4","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Nav.js":"5","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/index.js":"6","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Song.js":"7","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Library.js":"8"},{"size":3211,"mtime":1621337159887,"results":"9","hashOfConfig":"10"},{"size":585,"mtime":1621332103274,"results":"11","hashOfConfig":"10"},{"size":4226,"mtime":1621339526653,"results":"12","hashOfConfig":"10"},{"size":1723,"mtime":1621337117899,"results":"13","hashOfConfig":"10"},{"size":864,"mtime":1621324834596,"results":"14","hashOfConfig":"10"},{"size":413,"mtime":1621321461389,"results":"15","hashOfConfig":"10"},{"size":273,"mtime":1621321461389,"results":"16","hashOfConfig":"10"},{"size":683,"mtime":1621346126028,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i8pok7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/App.js",[],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/LibrarySong.js",[],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Player.js",["36"],"import React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleRight,\n  faAngleLeft,\n  faPause,\n  faRedoAlt,\n  faRandom,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  currSong,\n  isPlaying,\n  setIsPlaying,\n  audioRef,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrSong,\n  setSongs,\n  isOnLoop,\n  setonLoop,\n  setOnShuffle,\n  isOnShuffle,\n}) => {\n  // to set the current selected song as active\n  const allsongs = JSON.parse(JSON.stringify(songs));\n  useEffect(() => {\n    const selectedSong = allsongs.map((song) => {\n      if (song.id === currSong.id) {\n        return { ...song, active: true };\n      } else {\n        return { ...song, active: false };\n      }\n    });\n    setSongs(selectedSong);\n  }, [currSong, setSongs]);\n\n  //event handlers\n\n  // play pause the song\n  const playSongHandler = () => {\n    //we need to use reference (useRef) to access html tags...cant do getElementby as in vanilla JS\n    if (!isPlaying) {\n      audioRef.current.play();\n      setIsPlaying(true);\n    } else {\n      audioRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  // get the current playtime of the song\n  const getTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n\n  // to handle the dragging of the range bar for jumping to a specific time\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  //to go to the next and previous song\n  const nextPrevHandler = async (direction) => {\n    let current = songs.findIndex((song) => song.id === currSong.id);\n\n    if (isOnShuffle) {\n      let randomNumber = current;\n      while (randomNumber === current)\n        randomNumber = Math.floor(Math.random() * songs.length);\n      await setCurrSong(songs[randomNumber]);\n    } else {\n      if (direction === \"next\") {\n        await setCurrSong(songs[(current + 1) % songs.length]);\n      } else {\n        if (current - 1 === -1) {\n          current = songs.length;\n        }\n        await setCurrSong(songs[current - 1]);\n      }\n    }\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  const repeatHandler = () => {\n    setonLoop(!isOnLoop);\n  };\n\n  const shuffleHandler = () => {\n    setOnShuffle(!isOnShuffle);\n  };\n  //styles\n  const musicbar = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n\n  return (\n    <div className=\"player-container\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div className=\"track\">\n          <input\n            name=\"track-range\"\n            style={{\n              background: `linear-gradient(to right,${currSong.color[0]},${currSong.color[1]})`,\n            }}\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            onChange={dragHandler}\n            type=\"range\"\n          />\n          <div style={musicbar} className=\"animate-track\"></div>\n        </div>\n\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          onClick={() => repeatHandler()}\n          className=\"loop\"\n          size=\"2x\"\n          icon={faRedoAlt}\n          style={isOnLoop ? { color: currSong.color[0] } : { color: \"black\" }}\n        />\n\n        <FontAwesomeIcon\n          onClick={() => nextPrevHandler(\"back\")}\n          className=\"previous\"\n          size=\"2x\"\n          icon={faAngleLeft}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => nextPrevHandler(\"next\")}\n          className=\"next\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n        <FontAwesomeIcon\n          onClick={() => shuffleHandler(\"back\")}\n          className=\"shuffle\"\n          size=\"2x\"\n          icon={faRandom}\n          style={\n            isOnShuffle ? { color: currSong.color[0] } : { color: \"black\" }\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/data.js",[],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Nav.js",[],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/index.js",[],["37","38"],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Song.js",[],"/home/rajtiwari/myfiles/new/code/projects/react_music_player/src/components/Library.js",[],{"ruleId":"39","severity":1,"message":"40","line":38,"column":6,"nodeType":"41","endLine":38,"endColumn":26,"suggestions":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allsongs'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-native-reassign",["48"],"no-negated-in-lhs",["49"],{"desc":"50","fix":"51"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [allsongs, currSong, setSongs]",{"range":"52","text":"53"},[795,815],"[allsongs, currSong, setSongs]"]